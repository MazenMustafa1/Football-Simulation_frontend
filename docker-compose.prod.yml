# Docker Compose for Production Environment with HTTPS and Security
# Optimized for production deployment with SSL/TLS support

version: '3.8'

services:
  # Next.js Production Server
  football-frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: football-simulation-prod
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Production environment variables
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5000}
      - NEXT_PUBLIC_SIGNALR_URL=${NEXT_PUBLIC_SIGNALR_URL:-http://localhost:5000/hubs}
      - NEXT_TELEMETRY_DISABLED=1
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://yourdomain.com}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    networks:
      - football-network
    restart: always
    healthcheck:
      test: ['CMD', 'node', 'healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - app_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: football-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot:/var/www/certbot:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - football-frontend-prod
    networks:
      - football-network
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot
    container_name: football-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email --force-renewal -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - football-network
    profiles:
      - ssl-init

  # Optional: Redis for session storage and caching
  redis:
    image: redis:alpine
    container_name: football-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - football-network
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    profiles:
      - with-redis

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: football-loki
    ports:
      - '3100:3100'
    volumes:
      - loki_data:/loki
    networks:
      - football-network
    restart: always
    profiles:
      - logging

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: football-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - football-network
    restart: always
    profiles:
      - monitoring

networks:
  football-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  app_logs:
  nginx_cache:
  nginx_logs:
  redis_data:
  loki_data:
  prometheus_data:
